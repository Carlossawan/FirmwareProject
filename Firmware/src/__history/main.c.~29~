#include "main.h"
#include "hardware.h"
#include "system.h"
#include "scheduler.h"
#include "adc.h"
#include "tempr.h"
#include "timer.h"

// Global Variables for Time Tracking
volatile uint8_t hours = 12;    // Start at 12:00 (arbitrary)
volatile uint8_t minutes = 0;
volatile uint8_t seconds = 0;

// Task Handles
s_task_handle_t display_task;

// Function Prototypes
void time_temperature_display_task(s_task_handle_t me, s_task_msg_t **msg, void* arg);
void display_number(uint8_t numbers[4]);
void display_digit(uint8_t digit, uint8_t value);
float read_temperature(void); // Assuming a function to read temperature is defined elsewhere.

void main()
{
    bool ret;

    delay_ms(100); // Power-up delay

    // Initialize the system
    ret = scheduler_init(get_ticks_counter);
    if (!ret) while (true); // Stall on failure

    ret &= init_hw();
    ret &= init_system();
    ret &= init_adc();

    // Create tasks
    ret &= s_task_create(true, S_TASK_LOW_PRIORITY, 1000, time_temperature_display_task, NULL, NULL);

    if (ret)
    {
        while (true)
        {
            scheduler(); // Run scheduler forever
        }
    }
    else
    {
        while (true); // Stall on failure
    }
}

// Function to Display a BCD Value on a Specific Digit
void display_digit(uint8_t digit, uint8_t value)
{
    switch (digit)
    {
    case 1: // Digit 1
        output_bit(DIGIT_1_BCD0, (value & 0b0001));
        output_bit(DIGIT_1_BCD1, (value & 0b0010) >> 1);
        output_bit(DIGIT_1_BCD2, (value & 0b0100) >> 2);
        output_bit(DIGIT_1_BCD3, (value & 0b1000) >> 3);
        break;

    case 2: // Digit 2
        output_bit(DIGIT_2_BCD0, (value & 0b0001));
        output_bit(DIGIT_2_BCD1, (value & 0b0010) >> 1);
        output_bit(DIGIT_2_BCD2, (value & 0b0100) >> 2);
        output_bit(DIGIT_2_BCD3, (value & 0b1000) >> 3);
        break;

    case 3: // Digit 3
        output_bit(DIGIT_3_BCD0, (value & 0b0001));
        output_bit(DIGIT_3_BCD1, (value & 0b0010) >> 1);
        output_bit(DIGIT_3_BCD2, (value & 0b0100) >> 2);
        output_bit(DIGIT_3_BCD3, (value & 0b1000) >> 3);
        break;

    case 4: // Digit 4
        output_bit(DIGIT_4_BCD0, (value & 0b0001));
        output_bit(DIGIT_4_BCD1, (value & 0b0010) >> 1);
        output_bit(DIGIT_4_BCD2, (value & 0b0100) >> 2);
        output_bit(DIGIT_4_BCD3, (value & 0b1000) >> 3);
        break;

    default:
        break;
    }
}

// Function to Display a 4-Digit Number
void display_number(uint8_t numbers[4])
{
    display_digit(1, numbers[0]); // Display digit 1
    display_digit(2, numbers[1]); // Display digit 2
    display_digit(3, numbers[2]); // Display digit 3
    display_digit(4, numbers[3]); // Display digit 4
}

// Task to Display Time, Date, or Temperature
void time_temperature_display_task(s_task_handle_t me, s_task_msg_t **msg, void* arg)
{
    static uint8_t display_mode = 0; // 0: Time, 1: Date, 2: Temperature
    static uint8_t seconds_elapsed = 0;

    float temperature = read_temperature(); // Get the temperature

    // Increment elapsed seconds
    seconds_elapsed++;

    
    uint8_t digits[4];

    switch (display_mode)
    {
    case 0: // Display Time (HH:MM)
        digits[0] = hours / 10;    // Tens place of hours
        digits[1] = hours % 10;    // Units place of hours
        digits[2] = minutes / 10;  // Tens place of minutes
        digits[3] = minutes % 10;  // Units place of minutes
        break;

    case 1: // Display Date (DD-MM)
        digits[0] = 0; // Example Date: 01-01 (adjust as needed)
        digits[1] = 1;
        digits[2] = 0;
        digits[3] = 1;
        break;

    case 2: // Display Temperature (TT.C)
        digits[0] = (uint8_t)temperature / 10;
        digits[1] = (uint8_t)temperature % 10;
        digits[2] = (uint8_t)(temperature * 10) % 10; // Tenths place
        digits[3] = 12; // Custom encoding for 'C' (update if needed)
        break;

    default:
        digits[0] = digits[1] = digits[2] = digits[3] = 0; // Default to blank display
        break;
    }

    // Update the display
    display_number(*digits);
}

