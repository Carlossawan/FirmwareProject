#include "main.h"
#include "hardware.h"
#include "system.h"
#include "scheduler.h"
#include "adc.h"
#include "tempr.h"
#include "timer.h"

// Global Variables for Time Tracking
volatile uint8_t hours = 12;    // Start at 12:00 (arbitrary)
volatile uint8_t minutes = 0;
volatile uint8_t seconds = 0;

// Task Handles
s_task_handle_t display_task;

// Function Prototypes
void time_temperature_display_task(s_task_handle_t me, s_task_msg_t **msg, void* arg);
void display_number(uint8_t numbers[4]);
void enable_digit(uint8_t digit);
void display_digit(uint8_t value);
void update_time();

void main()
{
    bool ret;

    delay_ms(100); // Power-up delay

    // Initialize the system
    ret = scheduler_init(get_ticks_counter);
    if (!ret) while (true); // Stall on failure

    ret &= init_hw();
    ret &= init_system();
    ret &= init_adc();

    // Create tasks
    ret &= s_task_create(true, S_TASK_LOW_PRIORITY, 1000, time_temperature_display_task, NULL, NULL);

    if (ret)
    {
        while (true)
        {
            scheduler(); // Run scheduler forever
        }
    }
    else
    {
        while (true); // Stall on failure
    }
}



// Function to Enable a Specific Digit
void enable_digit(uint8_t digit)
{
    // Disable all digits
    output_low(DIGIT_1_CONTROL);
    output_low(DIGIT_2_CONTROL);
    output_low(DIGIT_3_CONTROL);
    output_low(DIGIT_4_CONTROL);

    // Enable the selected digit
    switch (digit)
    {
    case 0:
        output_high(DIGIT_1_CONTROL);
        break;
    case 1:
        output_high(DIGIT_2_CONTROL);
        break;
    case 2:
        output_high(DIGIT_3_CONTROL);
        break;
    case 3:
        output_high(DIGIT_4_CONTROL);
        break;
    default:
        break;
    }
}

// Function to Output a BCD Value to PORTD
void display_digit(uint8_t value)
{
    if (value < 10) // Ensure valid BCD value
    {
        BCD_PORT = value; // Output BCD value to PORTD
    }
}

// Multiplexing Function to Display a 4-Digit Number
void display_number(uint8_t numbers[4])
{
    for (uint8_t i = 0; i < 4; i++)
    {
        enable_digit(i);       // Enable the current digit
        display_digit(numbers[i]); // Output the BCD value
        delay_ms(2);           // Small delay for persistence
    }
}

// Task to Display Time, Date, or Temperature
void time_temperature_display_task(s_task_handle_t me, s_task_msg_t **msg, void* arg)
{
    static uint8_t display_mode = 2; // 0: Time, 1: Date, 2: Temperature
    static uint8_t seconds_elapsed = 0;

    float temperature = read_temperature(); // Get the temperature

   

    uint8_t digits[4];
    switch (display_mode)
    {
    case 0: // Display Time (HH:MM)
        digits[0] = hours / 10;
        digits[1] = hours % 10;
        digits[2] = minutes / 10;
        digits[3] = minutes % 10;
        break;
    case 1: // Display Date (DD-MM)
        digits[0] = 0; // Example Date: 01-01 (adjust as needed)
        digits[1] = 1;
        digits[2] = 0;
        digits[3] = 1;
        break;
    case 2: // Display Temperature (TT dC)
        digits[0] = (uint8_t)temperature / 10;
        digits[1] = (uint8_t)temperature % 10;
        digits[2] = (uint8_t)(temperature * 10) % 10; // Tenths place
        digits[3] = 12; // Custom encoding for 'C' (update if needed)
        break;
    }

    display_number(digits); // Update the display
}


