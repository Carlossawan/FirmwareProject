#include "main.h"
#include "hardware.h"
#include "system.h"
#include "scheduler.h"
#include "adc.h"
#include "tempr.h"
#include "timer.h"
#include "time.h"

// Task Handles
s_task_handle_t tempr_task;
s_task_handle_t motor_task;
s_task_handle_t display_task;

// Global Variables
uint8_t current_floor = 0;    // Ground Floor
uint8_t target_floor = 0;
bool is_moving = false;
bool direction_up = true;
bool floor_buttons[4] = {false, false, false, false}; // GF, F1, F2, F3



const uint8_t segment_encoding[10] = {
    0b00111111, // 0
    0b00000110, // 1
    0b01011011, // 2
    0b01001111, // 3
    0b01100110, // 4
    0b01101101, // 5
    0b01111101, // 6
    0b00000111, // 7
    0b01111111, // 8
    0b01101111  // 9
};


// Prototypes
void time_temperature_display_task(s_task_handle_t me, s_task_msg_t **msg, void* arg);
void display_task_func(s_task_handle_t me, s_task_msg_t **msg, void* arg);
void button_handler_task(s_task_handle_t me, s_task_msg_t **msg, void* arg);

void main()
{
    bool ret;

    delay_ms(100);  // Power-up delay

    // Initialize the system
    ret = scheduler_init(get_ticks_counter);
    if (!ret) while (true);  // Stall on failure

    ret &= init_hw();
    ret &= init_system();
    ret &= init_adc();

    // Create tasks
    ret &= s_task_create(true, S_TASK_LOW_PRIORITY, 1000, time_temperature_display_task, NULL, NULL);
    ret &= s_task_create(true, S_TASK_HIGH_PRIORITY, 500, display_task_func, &display_task, NULL);
    ret &= s_task_create(true, S_TASK_LOW_PRIORITY, 200, button_handler_task, NULL, NULL);

    if (ret)
    {
        while (true)
        {
            scheduler();  // Run scheduler forever
        }
    }
    else
    {
        while (true);  // Stall on failure
    }
}
void temperature_task(s_task_handle_t me, s_task_msg_t **msg, void* arg)
{
    float temperature = read_temperature();
    if (temperature > MAX_TEMPERATURE)
    {
        // Stop the elevator and show overheat warning
        is_moving = false;
    }
}


void disable_all_digits()
{
    output_low(PIN_DIGIT_1); // Disable digit 1
    output_low(PIN_DIGIT_2); // Disable digit 2
    output_low(PIN_DIGIT_3); // Disable digit 3
    output_low(PIN_DIGIT_4); // Disable digit 4
}



void output_segments(uint8_t encoded_value)
{
    output_bit(PIN_SEG_A, (encoded_value & 0b00000001)); // Segment A
    output_bit(PIN_SEG_B, (encoded_value & 0b00000010) >> 1); // Segment B
    output_bit(PIN_SEG_C, (encoded_value & 0b00000100) >> 2); // Segment C
    output_bit(PIN_SEG_D, (encoded_value & 0b00001000) >> 3); // Segment D
    output_bit(PIN_SEG_E, (encoded_value & 0b00010000) >> 4); // Segment E
    output_bit(PIN_SEG_F, (encoded_value & 0b00100000) >> 5); // Segment F
    output_bit(PIN_SEG_G, (encoded_value & 0b01000000) >> 6); // Segment G
    output_bit(PIN_SEG_DP, (encoded_value & 0b10000000) >> 7); // Decimal Point
}

void enable_digit(uint8_t digit)
{
    switch (digit)
    {
    case 0:
        output_high(PIN_DIGIT_1); // Enable digit 1
        break;
    case 1:
        output_high(PIN_DIGIT_2); // Enable digit 2
        break;
    case 2:
        output_high(PIN_DIGIT_3); // Enable digit 3
        break;
    case 3:
        output_high(PIN_DIGIT_4); // Enable digit 4
        break;
    default:
        break;
    }
}


void display_7seg(uint8_t digit, uint8_t value)
{
    // Clear all digit selects
    disable_all_digits();

    // Output the segment encoding for the digit
    output_segments(segment_encoding[value]);

    // Enable the specific digit
    enable_digit(digit);
}

void show_date_on_7seg(uint8_t day, uint8_t month)
{
    // Split day and month into individual digits
    uint8_t d1 = day / 10;   // Tens place of day
    uint8_t d2 = day % 10;   // Units place of day
    uint8_t m1 = month / 10; // Tens place of month
    uint8_t m2 = month % 10; // Units place of month

    // Dynamically update each digit
    display_7seg(0, d1); // Show tens place of day
    delay_ms(2);

    display_7seg(1, d2); // Show units place of day
    delay_ms(2);

    display_7seg(2, m1); // Show tens place of month
    delay_ms(2);

    display_7seg(3, m2); // Show units place of month
    delay_ms(2);
}
void show_temperature_on_7seg(float temperature)
{
    // Extract individual digits from temperature
    uint8_t t1 = (uint8_t)temperature / 10;   // Tens place
    uint8_t t2 = (uint8_t)temperature % 10;   // Units place
    uint8_t t3 = (uint8_t)(temperature * 10) % 10; // Tenths place (after decimal)

    // Dynamically update each digit
    display_7seg(0, t1); // Show tens place
    delay_ms(2);

    display_7seg(1, t2); // Show units place
    delay_ms(2);

    display_7seg(2, t3); // Show tenths place
    delay_ms(2);

    display_7seg(3, 12); // Show 'C' (use custom encoding if necessary)
    delay_ms(2);
}
void show_time_on_7seg(uint8_t hours, uint8_t minutes)
{
    // Split hours and minutes into individual digits
    uint8_t h1 = hours / 10;   // First digit of hours
    uint8_t h2 = hours % 10;   // Second digit of hours
    uint8_t m1 = minutes / 10; // First digit of minutes
    uint8_t m2 = minutes % 10; // Second digit of minutes

    // Dynamically update each digit
    display_7seg(0, h1); // Show first hour digit
    delay_ms(2);         // Small delay for multiplexing

    display_7seg(1, h2); // Show second hour digit
    delay_ms(2);

    display_7seg(2, m1); // Show first minute digit
    delay_ms(2);

    display_7seg(3, m2); // Show second minute digit
    delay_ms(2);
}



void time_temperature_display_task(s_task_handle_t me, s_task_msg_t **msg, void* arg)
{
    static uint8_t display_mode = 0; // 0: Time, 1: Date, 2: Temperature
    static uint8_t seconds_elapsed = 0;

    // Fetch the current system time and temperature
    time_t now = time(NULL);
    struct tm *current_time = localtime(&now);
    float temperature = read_temperature();

    // Increment the elapsed seconds
    seconds_elapsed++;

    // Every 10 seconds, update the display mode
    if (seconds_elapsed >= 10)
    {
        seconds_elapsed = 0; // Reset counter
        display_mode = (display_mode + 1) % 3; // Cycle through 0, 1, 2
    }

    // Display based on the current mode
    switch (display_mode)
    {
    case 0: // Time (HH:MM)
        show_time_on_7seg(current_time->tm_hour, current_time->tm_min);
        break;
    case 1: // Date (DD-MM)
        show_date_on_7seg(current_time->tm_mday, current_time->tm_mon + 1);
        break;
    case 2: // Temperature (TT dC)
        show_temperature_on_7seg(temperature);
        break;
    }
}



void update_7seg_display(uint8_t encoded_value)
{
    // Assuming PORTD is connected to the 7-segment display
    output_d(encoded_value);
}


void display_floor(uint8_t floor)
{
    if (floor < 4) // Ensure valid floor number
    {
        uint8_t encoded_value = segment_encoding[floor];
        update_7seg_display(encoded_value);
    }
}
void display_task_func(s_task_handle_t me, s_task_msg_t **msg, void* arg)
{
    // Update floor and temperature display
    display_floor(current_floor);
    
}
void button_handler_task(s_task_handle_t me, s_task_msg_t **msg, void* arg)
{
    for (uint8_t i = 0; i < 4; i++)
    {
        if (floor_buttons[i] && !is_moving)
        {
            target_floor = i;
            is_moving = true;
            break;  // Only handle one button at a time
        }
    }
}



void display_temperature(float temperature)
{
}
void handle_buttons(void)
{
    
    if (input(PIN_C7)) floor_buttons[0] = true;
    if (input(PIN_C6)) floor_buttons[1] = true;
    if (input(PIN_B7)) floor_buttons[2] = true;
    if (input(PIN_B6)) floor_buttons[3] = true;
}





