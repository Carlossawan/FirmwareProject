#include "main.h"
#include "hardware.h"
#include "system.h"
#include "scheduler.h"
#include "adc.h"
#include "tempr.h"
#include "rtc.h"
#include "timer.h"
#include "rtc.c"

#define HIGH_SPEED 3
#define MEDIUM_SPEED 2
#define LOW_SPEED 1

s_task_handle_t display_task;

void time_temperature_display_task(s_task_handle_t me, s_task_msg_t **msg, void* arg);
void display_number(uint8_t numbers[4]);
void display_digit(uint8_t digit, uint8_t value);
float read_temperature(void);

void main()
{
    bool ret;
    delay_ms(100);

    ret = scheduler_init(get_ticks_counter);
    if (!ret) while (true);

    ret &= init_hw();
    ret &= init_system();
    ret &= init_adc();
    rtc_initialize();

    update_display(0);

    ret &= s_task_create(true, S_TASK_LOW_PRIORITY, 1000, time_temperature_display_task, NULL, NULL);

    if (ret)
    {
        while (true)
        {
            scheduler();
            uint8_t selected_floor = read_buttons();
            if (selected_floor != 255)
            {
                target_floor = selected_floor;
                is_moving = true;
            }
            if (is_moving)
            {
                move_elevator();
            }
            delay_ms(100);
        }
    }
    else
    {
        while (true);
    }
}

void update_display(uint8_t floor)
{
    if (floor > 3) return;
    output_bit(SEG_A, (floor & 0b0001));
    output_bit(SEG_B, (floor & 0b0010) >> 1);
    output_bit(SEG_C, (floor & 0b0100) >> 2);
    output_bit(SEG_D, (floor & 0b1000) >> 3);
}

uint8_t read_buttons(void)
{
    if (!input(Cab_GF)) return 0;
    if (!input(Cab_F1)) return 1;
    if (!input(Cab_F2)) return 2;
    if (!input(Cab_F3)) return 3;

    if (!input(flr3_Btn_Dn)) return 3;
    if (!input(flr2_Btn_Up)) return 2;
    if (!input(flr2_Btn_Dn)) return 2;
    if (!input(flr1_Btn_Up)) return 1;
    if (!input(flr1_Btn_Dn)) return 1;
    if (!input(flr0_Btn_Up)) return 0;

    return 255;
}

bool check_floor_stop(uint8_t floor)
{
    switch(floor) {
        case 0: return !input(Flr0_Stop);
        case 1: return !input(Flr1_Stop);
        case 2: return !input(Flr2_Stop);
        case 3: return !input(Flr3_Stop);
        default: return false;
    }
}

void adjust_speed(void)
{
    if (current_floor == target_floor) {
        elevator_speed = LOW_SPEED;
        return;
    }

    if (current_floor < target_floor) {
        switch(current_floor) {
            case 0:
                if (!input(Flr0_Spd_Chg2)) elevator_speed = MEDIUM_SPEED;
                else elevator_speed = HIGH_SPEED;
                break;
            case 1:
                if (!input(Flr1_Spd_Chg2)) elevator_speed = MEDIUM_SPEED;
                else if (!input(Flr1_Spd_Chg1)) elevator_speed = MEDIUM_SPEED;
                else elevator_speed = HIGH_SPEED;
                break;
            case 2:
                if (!input(Flr2_Spd_Chg2)) elevator_speed = MEDIUM_SPEED;
                else if (!input(Flr2_Spd_Chg1)) elevator_speed = MEDIUM_SPEED;
                else elevator_speed = HIGH_SPEED;
                break;
        }
    } else {
        switch(current_floor) {
            case 3:
                if (!input(Flr3_Spd_Chg1)) elevator_speed = MEDIUM_SPEED;
                else elevator_speed = HIGH_SPEED;
                break;
            case 2:
                if (!input(Flr2_Spd_Chg2)) elevator_speed = MEDIUM_SPEED;
                else if (!input(Flr2_Spd_Chg1)) elevator_speed = MEDIUM_SPEED;
                else elevator_speed = HIGH_SPEED;
                break;
            case 1:
                if (!input(Flr1_Spd_Chg2)) elevator_speed = MEDIUM_SPEED;
                else if (!input(Flr1_Spd_Chg1)) elevator_speed = MEDIUM_SPEED;
                else elevator_speed = HIGH_SPEED;
                break;
        }
    }
}

void move_elevator(void)
{
    static bool initial_delay = true;
    
    if (initial_delay) {
        delay_ms(1000);
        initial_delay = false;
    }

    adjust_speed();

    uint16_t delay_time = (elevator_speed == HIGH_SPEED) ? 1000 :
                         (elevator_speed == MEDIUM_SPEED) ? 2000 : 3000;

    if (current_floor < target_floor) {
        if (check_floor_stop(current_floor + 1)) {
            current_floor++;
            update_display(current_floor);
        }
    }
    else if (current_floor > target_floor) {
        if (check_floor_stop(current_floor - 1)) {
            current_floor--;
            update_display(current_floor);
        }
    }
    else {
        is_moving = false;
        initial_delay = true;
    }

    delay_ms(delay_time);
}

// [Rest of the code remains unchanged - display functions]
void time_temperature_display_task(s_task_handle_t me, s_task_msg_t **msg, void* arg)
{
    static uint8_t display_mode = 0;
    static uint8_t seconds_elapsed = 0;

    custom_rtc_time_t rtc_time;
    rtc_get_time(&rtc_time);

    float temperature = read_temperature();

    seconds_elapsed++;
    if (seconds_elapsed >= 10)
    {
        seconds_elapsed = 0;
        display_mode = (display_mode + 1) % 3;
    }

    uint8_t digits[4] = {0, 0, 0, 0};

    switch (display_mode)
    {
    case 0:
        digits[0] = rtc_time.hours / 10;
        digits[1] = rtc_time.hours % 10;
        digits[2] = rtc_time.minutes / 10;
        digits[3] = rtc_time.minutes % 10;
        break;
    case 1:
        digits[0] = rtc_time.day / 10;
        digits[1] = rtc_time.day % 10;
        digits[2] = rtc_time.month / 10;
        digits[3] = rtc_time.month % 10;
        break;
    case 2:
        digits[0] = (uint8_t)temperature / 10;
        digits[1] = (uint8_t)temperature % 10;
        digits[2] = (uint8_t)(temperature * 10) % 10;
        digits[3] = 12;
        break;
    default:
        digits[0] = digits[1] = digits[2] = digits[3] = 0;
        break;
    }

    display_number(digits);
}

void display_digit(uint8_t digit, uint8_t value)
{
    switch (digit)
    {
    case 1:
        output_bit(DIGIT_1_BCD0, (value & 0b0001));
        output_bit(DIGIT_1_BCD1, (value & 0b0010) >> 1);
        output_bit(DIGIT_1_BCD2, (value & 0b0100) >> 2);
        output_bit(DIGIT_1_BCD3, (value & 0b1000) >> 3);
        break;
    case 2:
        output_bit(DIGIT_2_BCD0, (value & 0b0001));
        output_bit(DIGIT_2_BCD1, (value & 0b0010) >> 1);
        output_bit(DIGIT_2_BCD2, (value & 0b0100) >> 2);
        output_bit(DIGIT_2_BCD3, (value & 0b1000) >> 3);
        break;
    case 3:
        output_bit(DIGIT_3_BCD0, (value & 0b0001));
        output_bit(DIGIT_3_BCD1, (value & 0b0010) >> 1);
        output_bit(DIGIT_3_BCD2, (value & 0b0100) >> 2);
        output_bit(DIGIT_3_BCD3, (value & 0b1000) >> 3);
        break;
    case 4:
        output_bit(DIGIT_4_BCD0, (value & 0b0001));
        output_bit(DIGIT_4_BCD1, (value & 0b0010) >> 1);
        output_bit(DIGIT_4_BCD2, (value & 0b0100) >> 2);
        output_bit(DIGIT_4_BCD3, (value & 0b1000) >> 3);
        break;
    default:
        break;
    }
}

void display_number(uint8_t numbers[4])
{
    display_digit(1, numbers[0]);
    display_digit(2, numbers[1]);
    display_digit(3, numbers[2]);
    display_digit(4, numbers[3]);
}
